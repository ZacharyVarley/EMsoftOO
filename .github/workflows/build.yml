name: Multi-Platform Build and Auto-Release

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y git vim wget cmake gcc gfortran ninja-build build-essential libopenblas-dev apt-utils opencl-headers ocl-icd-opencl-dev ocl-icd-libopencl1 libpocl-dev clinfo
      - name: Run Ubuntu build script
        run: |
          chmod +x ./build_ubuntu.sh
          ./build_ubuntu.sh
        shell: bash
      - name: Check for built artifact
        id: check_artifact
        run: |
          ARTIFACT_PATH=$(find $HOME -name "EMsoftOO-*.tar.gz" -type f -print -quit)
          if [ -z "$ARTIFACT_PATH" ]; then
            echo "Error: Ubuntu artifact not found"
            exit 1
          fi
          echo "ARTIFACT_PATH=$ARTIFACT_PATH" >> $GITHUB_OUTPUT
          echo "Found artifact at: $ARTIFACT_PATH"
      - name: Upload Ubuntu artifact
        uses: actions/upload-artifact@v4
        with:
          name: EMsoftOO-Ubuntu
          path: ${{ steps.check_artifact.outputs.ARTIFACT_PATH }}

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies (macOS)
        run: |
          brew install git cmake gcc ninja opencl-icd-loader opencl-headers openblas open-mpi
      - name: Run macOS build script
        run: |
          chmod +x ./build_macos.sh
          ./build_macos.sh
        shell: bash
      - name: Check for built artifact
        id: check_artifact
        run: |
          ARTIFACT_PATH=$(find $HOME -name "EMsoftOO-*.dmg" -type f -print -quit)
          if [ -z "$ARTIFACT_PATH" ]; then
            echo "Error: macOS artifact not found"
            exit 1
          fi
          echo "ARTIFACT_PATH=$ARTIFACT_PATH" >> $GITHUB_OUTPUT
          echo "Found artifact at: $ARTIFACT_PATH"
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: EMsoftOO-MacOS
          path: ${{ steps.check_artifact.outputs.ARTIFACT_PATH }}

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Windows build script
        shell: cmd
        run: |
          build_windows.bat
      - name: Check for built artifact
        id: check_artifact
        shell: pwsh
        run: |
          $ARTIFACT_PATH = Get-ChildItem -Path $env:GITHUB_WORKSPACE -Recurse -Filter "EMsoftOO-*.zip" | Select-Object -First 1 -ExpandProperty FullName
          if (-not $ARTIFACT_PATH) {
            Write-Error "Error: Windows artifact not found"
            exit 1
          }
          echo "ARTIFACT_PATH=$ARTIFACT_PATH" >> $env:GITHUB_OUTPUT
          echo "Found artifact at: $ARTIFACT_PATH"
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: EMsoftOO-Windows
          path: ${{ steps.check_artifact.outputs.ARTIFACT_PATH }}

  create-ubuntu-release:
    needs: [build-ubuntu]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - uses: actions/checkout@v4
      - name: Download Ubuntu artifact
        uses: actions/download-artifact@v4
        with:
          name: EMsoftOO-Ubuntu
      - name: List downloaded files
        run: ls -R
      - name: Find tar.gz file
        id: find_tarball
        run: |
          TARBALL_PATH=$(find . -name "EMsoftOO-*.tar.gz" -type f -print -quit)
          if [ -z "$TARBALL_PATH" ]; then
            echo "tar.gz file not found"
            exit 1
          fi
          echo "TARBALL_PATH=$TARBALL_PATH" >> $GITHUB_OUTPUT
          echo "Found tar.gz at: $TARBALL_PATH"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ubuntu-${{ github.sha }}
          release_name: Ubuntu Release ${{ github.sha }}
          draft: false
          prerelease: false
      - name: Upload Ubuntu Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_tarball.outputs.TARBALL_PATH }}
          asset_name: EMsoftOO-Ubuntu-${{ github.sha }}.tar.gz
          asset_content_type: application/gzip

  create-macos-release:
    needs: [build-macos]
    runs-on: macos-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - uses: actions/checkout@v4
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: EMsoftOO-MacOS
      - name: List downloaded files
        run: ls -R
      - name: Find DMG file
        id: find_dmg
        run: |
          DMG_PATH=$(find . -name "EMsoftOO-*.dmg" -type f -print -quit)
          if [ -z "$DMG_PATH" ]; then
            echo "DMG file not found"
            exit 1
          fi
          echo "DMG_PATH=$DMG_PATH" >> $GITHUB_OUTPUT
          echo "Found DMG at: $DMG_PATH"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: macos-${{ github.sha }}
          release_name: macOS Release ${{ github.sha }}
          draft: false
          prerelease: false
      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_dmg.outputs.DMG_PATH }}
          asset_name: EMsoftOO-macOS-${{ github.sha }}.dmg
          asset_content_type: application/x-apple-diskimage

  create-windows-release:
    needs: [build-windows]
    runs-on: windows-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - uses: actions/checkout@v4
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: EMsoftOO-Windows
      - name: List downloaded files
        shell: pwsh
        run: Get-ChildItem -Recurse
      - name: Find ZIP file
        id: find_zip
        shell: pwsh
        run: |
          $ZIP_PATH = Get-ChildItem -Path . -Recurse -Filter "EMsoftOO-*.zip" | Select-Object -First 1 -ExpandProperty FullName
          if (-not $ZIP_PATH) {
            Write-Error "ZIP file not found"
            exit 1
          }
          echo "ZIP_PATH=$ZIP_PATH" >> $env:GITHUB_OUTPUT
          echo "Found ZIP at: $ZIP_PATH"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: windows-${{ github.sha }}
          release_name: Windows Release ${{ github.sha }}
          draft: false
          prerelease: false
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_zip.outputs.ZIP_PATH }}
          asset_name: EMsoftOO-Windows-${{ github.sha }}.zip
          asset_content_type: application/zip
